[{"C:\\Users\\atocchi\\Desktop\\Projects\\heatpi\\frontend\\src\\index.js":"1","C:\\Users\\atocchi\\Desktop\\Projects\\heatpi\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\atocchi\\Desktop\\Projects\\heatpi\\frontend\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":4182,"mtime":1610673549329,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1qmksm5",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\Users\\atocchi\\Desktop\\Projects\\heatpi\\frontend\\src\\index.js",[],["16","17"],"C:\\Users\\atocchi\\Desktop\\Projects\\heatpi\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\atocchi\\Desktop\\Projects\\heatpi\\frontend\\src\\App.js",["18","19","20","21","22","23"],"import Axios from 'axios';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport {useState,useEffect} from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Logo from './images/logo192.png';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nfunction App() {\n\n  const [status,setStatus] = useState(false);\n  const [enable, setEnable] =useState(true);\n  const [time, setTime] =useState(0);\n  const [timing, setTiming] =useState(null);\n  let timex = 0;\n  const [hms, setHMS] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  })\n  //get status of the switch (false is off true is on)\n  useEffect(()=>{\n    Axios(process.env.REACT_APP_IP).then(function (res){\n      setStatus(res.data.bool)\n      timex = res.data.time\n      if(timex !== 0){\n        setEnable(false)\n        if(timing !== null){\n          clearInterval(timing)\n        }\n        setTiming(setInterval(function(){\n          timex = timex -1\n          setTime(timex)\n          //hour minute seconds\n          let hours = Math.floor(timex/3600)\n          let minutes = Math.floor((timex - (hours * 3600))/60)\n          let seconds = (timex - ((hours * 3600) + (minutes * 60)))\n          setHMS({hours: hours, minutes: minutes, seconds: seconds})\n          if(timex == 0){\n            console.log('cleared')\n            setEnable(true);\n            clearInterval(timing)\n          }\n          console.log(timex);\n          },1000 ))\n        }\n    })\n      \n  },[])\n //submit function with axios\n function power(){\n   let data = {post: status}\n   Axios.post(process.env.REACT_APP_IP + '/post', data).then(function (res){\n    console.log(res.data)\n    setStatus(res.data)\n   })\n }\n\n function timer(x){\n  let data = {seconds: x};\n  setEnable(false)\n  if(x === 'clear'){\n    Axios.post(process.env.REACT_APP_IP + '/date',data)\n    setTime(0)\n    timex = 0;\n    setHMS({hours: 0, minutes: 0, seconds: 0});\n    clearInterval(timing);\n    setEnable(true);\n    return;\n  }\n  setTime(x);\n  Axios.post(process.env.REACT_APP_IP + '/date',data)\n  console.log('timer')\n  timex = x\n  //interval within function to be cleared\n  console.log(timing)\n  clearInterval(timing)\n  setTiming(setInterval(function(){\n  timex = timex -1\n  setTime(timex)\n  //hour minute seconds\n  let hours = Math.floor(timex/3600)\n  let minutes = Math.floor((timex - (hours * 3600))/60)\n  let seconds = (timex - ((hours * 3600) + (minutes * 60)))\n  setHMS({hours: hours, minutes: minutes, seconds: seconds})\n  if(timex == 0){\n    console.log('cleared')\n    clearInterval(timing)\n  }\n  console.log(timex);\n  },1000 ))\n}\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Container maxWidth=\"sm\">\n        <Typography component=\"div\" style={{ backgroundColor: '#cfe8fc', height: '100vh' }} >\n          <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n            HeatPi\n          </Typography>\n          <div style={{marginBottom: '10px'}}>\n            <img src={Logo} />\n          </div>\n          <Switch label='power' size=\"large\" checked={status} onChange={power} />\n          <ButtonGroup  variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n            <Button onClick={()=>timer('clear')}color=\"secondary\" disabled={enable}>Clear</Button>\n            <Button onClick={()=>timer(7200)}>2hrs</Button>\n            <Button onClick={()=>timer(14400)}>4hrs</Button>\n            <Button onClick={()=>timer(28800)}>8hrs</Button>\n          </ButtonGroup>\n          <br></br>\n          <Typography variant=\"h2\" component=\"h2\" gutterBottom>\n            {hms.hours} : {hms.minutes <= 9 ? '0': ''}{hms.minutes} : {hms.seconds <= 9 ? '0': ''}{hms.seconds}\n          </Typography>\n        </Typography>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":13,"column":7,"nodeType":"30","messageId":"31","endLine":13,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":28,"column":10,"nodeType":"30","messageId":"31","endLine":28,"endColumn":14},{"ruleId":"33","severity":1,"message":"34","line":40,"column":15,"nodeType":"35","endLine":40,"endColumn":28},{"ruleId":"36","severity":1,"message":"37","line":54,"column":20,"nodeType":"38","messageId":"39","endLine":54,"endColumn":22},{"ruleId":"36","severity":1,"message":"37","line":101,"column":12,"nodeType":"38","messageId":"39","endLine":101,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":117,"column":13,"nodeType":"42","endLine":117,"endColumn":31},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'useStyles' is assigned a value but never used.","Identifier","unusedVar","'time' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'timex' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]